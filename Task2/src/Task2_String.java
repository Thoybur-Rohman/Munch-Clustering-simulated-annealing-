import java.util.ArrayList;
import java.util.Collections;

public class Task2_String {
	private static UI rand = new UI();
    public static void main (String[] args) {
        String[][] testData = {
        		{"0", "0", "0", "1"},
        		{"0", "0", "0", "0"},
        		{"0", "0", "0", "0"},
        		{"1", "0", "0", "0"}};
        String[][] p38 = {
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","1","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","1","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","1","1","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","1","1","1","1","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","1","1","1","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","1","1","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","1","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","1","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","1","1","1","1","1","1"},
        		{"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","1","1","1","1","1"},
                {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","1","1","1","1"},
                {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","1","1","1"},
                {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","1","1"},
                {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","0","1"},
                {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","0"}
        };
        
        System.out.println(Q1(p38));
        Q2("8");
        Q2R("9");
        
        System.out.println(Q3(p38, Q2("8")));
        
        Q4(Q2("2"));
        Q5(p38, "10000");
    }
    public static boolean Q1(String[][] mdg) {
		// Null
		if (mdg == null) {
			return false;
		}
		// Empty
		if (mdg.length <= 1) {
			return false;
		}
		// Squared
		for (int x = 0; x < mdg.length; x++) {
			// ADDED THIS
			if (mdg[x] == null) {
				return false;
			}
			if (mdg[x].length != mdg.length) {
				return false;
			}
		}
		// Binary
		for (int i = 0; i < mdg.length; i++) {
			for (int j = 0; j < mdg.length; j++) {
				if (mdg[i][j] != "0" && mdg[i][j] != "1") {
					return false;
				}
				// UNICODE COMMENTED OUT USE IF NEEDED
				/*
				if (mdg[i][j] == '\u0000') {
					return false;
				}
				if (mdg[i][j] == '\u0001') {
					return false;
				}
				*/
			}
		}
		// Symmetry
		for (int i = 0; i < mdg.length; i++) {
			if (mdg[i][i] != "0") {
				return false;
			}
		}
		// Inverse
		for (int i = 0; i < mdg.length; i++) {
			for (int j = 0; j < mdg.length; j++) {
				if (mdg[i][j] != mdg[j][i]) {

					return false;
				}
			}
		}
		return true;
	}
    public static ArrayList<String> Q2(String n) {
    	if (n == null) {
    		return null;
    	}
    	int y;
    	try {
    		y = Integer.parseInt(n);
    	} catch (Exception e) {
    		return null;
    	}
    	if (y < 1) {
    		return null;
    	}
        ArrayList<String> cluster = new ArrayList<>();
        int x = y;
        // The value of each item in the cluster corresponds to the cluster number, so item '2' belongs to cluster 2
        for (int i = 1; i < x + 1; i++) {
            // For each i, iterate i + 1 times
            for (int j = 2; j <= i + 1; j++) {
                cluster.add(Integer.toString(i));
            }
        }
        System.out.println(cluster);
        return cluster;
    }
    public static ArrayList<String> Q2R(String n) {
    	if (n == null) {
    		return null;
    	}
    	int y;
    	try {
    		y = Integer.parseInt(n);
    	} catch (Exception e) {
    		return null;
    	}
    	if (y < 1) {
    		return null;
    	}
        ArrayList<String> cluster = new ArrayList<>();

        for (int i = 1; i < y+1; i++) {
        	cluster.add(Integer.toString(i));

        }
        Collections.shuffle(cluster);
        System.out.println(cluster);
        return cluster;
    }
    
    public static String Q3(String[][] mdg, ArrayList<String> C) {
    	if (!Q1(mdg)) {
    		return null;
    	}
    	if (C == null) {
    		return null;
    	}
    	if (mdg.length != C.size()) {
    		return null;
    	}
    	for (int i = 0; i < C.size(); i++) {
    		if ((Integer.parseInt(C.get(i))) < 1) {
    			return null;
    		}
    	}
    	int evm = 0;
    	String c1;
    	String c2;
    	for (int j = 0; j < mdg.length - 1; j++) {
    		for (int k = j+1; k < mdg.length; k++) {
    			c1 = C.get(j);
    			c2 = C.get(k);
    			if (c1.equals(c2)) {
    				evm = evm + 2*Integer.parseInt(mdg[j][k]) - 1;
    			}
    		}
    	}
    	return Integer.toString(evm);
    }
    public static ArrayList<String> Q4(ArrayList<String> C)
    {
    	if (C == null) {
    		System.out.println("Null");
    		return null;
    	}
    	if (C.size() == 0) {
    		System.out.println("Size too small");
    		return null;
    	}
    	for (int i = 0; i < C.size(); i++) {
    		if (Integer.parseInt(C.get(i)) < 1) {
    			System.out.println("Negative");
    			return null;
    		}
    	}
        ArrayList<String> ClusteringArrangment = (ArrayList<String>) C.clone();
        int number_size = ClusteringArrangment.size();
        int number = rand.UI_Int(1, number_size - 1);
        int index = rand.UI_Int(0, number_size - 1);
        while (ClusteringArrangment.get(index).equals(Integer.toString(number))) {
            number = rand.UI_Int(1, number_size - 1);
        }
        ClusteringArrangment.set(index, Integer.toString(number));
        System.out.println(ClusteringArrangment);
        return ClusteringArrangment;
    }
    public static ArrayList<String> Q5(String M[][], String ITER)
    {
    	if (ITER == null) {
    		return null;
    	}
    	int y;
    	try {
    		y = Integer.parseInt(ITER);
    	} catch (Exception e) {
    		return null;
    	}
    	if (y < 1) {
    		return null;
    	}
    	if (Q1(M) == false)
    	{
    		return null;
    	}
    	ArrayList<String> C = Q2R(Integer.toString(M.length));
    	int currentFitness = Integer.parseInt(Q3(M, C));

    	for (int x = 1; x < y; x++)
    	{	
    		ArrayList<String> small_change = Q4(C);
    		int newFitness = Integer.parseInt(Q3(M, small_change));
    		System.out.println("Current fitness: " + currentFitness);
    		System.out.println("New fitness: " + newFitness);
    		if ( newFitness > currentFitness)
    		{
    			C = (ArrayList<String>) small_change.clone();
    			currentFitness = newFitness;
    		}
    	}
    	return C;
    }
    
}
